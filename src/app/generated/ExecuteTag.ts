/**
 * ExecuteTag automatically generated by SDKgen please do not edit this file manually
 * {@link https://sdkgen.app}
 */

import {TagAbstract, HttpRequest} from "sdkgen-client"
import {ClientException, UnknownStatusCodeException} from "sdkgen-client";

import {CertbotRequest} from "./CertbotRequest";
import {DockerImages} from "./DockerImages";
import {DockerLogin} from "./DockerLogin";
import {DockerProcesses} from "./DockerProcesses";
import {DockerStatistics} from "./DockerStatistics";
import {Message} from "./Message";
import {MessageException} from "./MessageException";
import {Passthru} from "./Passthru";

export class ExecuteTag extends TagAbstract {
    /**
     * Registers an SSL certificate for the provided domain
     *
     * @returns {Promise<Message>}
     * @throws {MessageException}
     * @throws {ClientException}
     */
    public async certbot(payload: CertbotRequest): Promise<Message> {
        const url = this.parser.url('/execute/certbot', {
        });

        let request: HttpRequest = {
            url: url,
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            params: this.parser.query({
            }, [
            ]),
            data: payload
        };

        const response = await this.httpClient.request(request);
        if (response.ok) {
            return await response.json() as Message;
        }

        const statusCode = response.status;
        if (statusCode >= 0 && statusCode <= 999) {
            throw new MessageException(await response.json() as Message);
        }

        throw new UnknownStatusCodeException('The server returned an unknown status code: ' + statusCode);
    }
    /**
     * Returns all available images
     *
     * @returns {Promise<DockerImages>}
     * @throws {MessageException}
     * @throws {ClientException}
     */
    public async images(payload: Passthru): Promise<DockerImages> {
        const url = this.parser.url('/execute/images', {
        });

        let request: HttpRequest = {
            url: url,
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            params: this.parser.query({
            }, [
            ]),
            data: payload
        };

        const response = await this.httpClient.request(request);
        if (response.ok) {
            return await response.json() as DockerImages;
        }

        const statusCode = response.status;
        if (statusCode >= 0 && statusCode <= 999) {
            throw new MessageException(await response.json() as Message);
        }

        throw new UnknownStatusCodeException('The server returned an unknown status code: ' + statusCode);
    }
    /**
     * Docker login to pull private images
     *
     * @returns {Promise<Message>}
     * @throws {MessageException}
     * @throws {ClientException}
     */
    public async login(payload: DockerLogin): Promise<Message> {
        const url = this.parser.url('/execute/login', {
        });

        let request: HttpRequest = {
            url: url,
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            params: this.parser.query({
            }, [
            ]),
            data: payload
        };

        const response = await this.httpClient.request(request);
        if (response.ok) {
            return await response.json() as Message;
        }

        const statusCode = response.status;
        if (statusCode >= 0 && statusCode <= 999) {
            throw new MessageException(await response.json() as Message);
        }

        throw new UnknownStatusCodeException('The server returned an unknown status code: ' + statusCode);
    }
    /**
     * List containers
     *
     * @returns {Promise<DockerProcesses>}
     * @throws {MessageException}
     * @throws {ClientException}
     */
    public async ps(payload: Passthru): Promise<DockerProcesses> {
        const url = this.parser.url('/execute/ps', {
        });

        let request: HttpRequest = {
            url: url,
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            params: this.parser.query({
            }, [
            ]),
            data: payload
        };

        const response = await this.httpClient.request(request);
        if (response.ok) {
            return await response.json() as DockerProcesses;
        }

        const statusCode = response.status;
        if (statusCode >= 0 && statusCode <= 999) {
            throw new MessageException(await response.json() as Message);
        }

        throw new UnknownStatusCodeException('The server returned an unknown status code: ' + statusCode);
    }
    /**
     * Returns statistic data for all running containers
     *
     * @returns {Promise<DockerStatistics>}
     * @throws {MessageException}
     * @throws {ClientException}
     */
    public async stats(payload: Passthru): Promise<DockerStatistics> {
        const url = this.parser.url('/execute/stats', {
        });

        let request: HttpRequest = {
            url: url,
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            params: this.parser.query({
            }, [
            ]),
            data: payload
        };

        const response = await this.httpClient.request(request);
        if (response.ok) {
            return await response.json() as DockerStatistics;
        }

        const statusCode = response.status;
        if (statusCode >= 0 && statusCode <= 999) {
            throw new MessageException(await response.json() as Message);
        }

        throw new UnknownStatusCodeException('The server returned an unknown status code: ' + statusCode);
    }



}
